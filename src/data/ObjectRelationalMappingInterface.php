<?php

namespace JulianSeymour\PHPWebApplicationFramework\data;

use JulianSeymour\PHPWebApplicationFramework\command\data\GetForeignDataStructureCommand;
use JulianSeymour\PHPWebApplicationFramework\command\data\GetForeignDataStructureCountCommand;
use JulianSeymour\PHPWebApplicationFramework\command\data\GetForeignDataStructureListCommand;
use JulianSeymour\PHPWebApplicationFramework\command\data\GetForeignDataStructureListMemberCommand;
use JulianSeymour\PHPWebApplicationFramework\command\data\HasForeignDataStructureCommand;
use JulianSeymour\PHPWebApplicationFramework\command\data\SetForeignDataStructureCommand;
use mysqli;

interface ObjectRelationalMappingInterface{
	
	function acquireForeignDataStructure(mysqli $mysqli, string $column_name):?DataStructure;
	function getForeignDataStructures():?array;
	function ejectForeignDataStructure(string $column_name):?DataStructure;
	function ejectOldDataStructure(string $column_name):?DataStructure;
	function ejectForeignDataStructureListMember(string $column_name, $key):?DataStructure;
	function ejectOldDataStructureListMember(string $column_name, $key):?DataStructure;
	function getOldDataStructure($column_name):DataStructure;
	function getForeignDataStructure(string $column_name):DataStructure;
	function getForeignDataStructureCommand(string $column_name): GetForeignDataStructureCommand;
	function hasForeignDataStructureCommand(string $column_name): HasForeignDataStructureCommand;
	function setForeignDataStrucureCommand(string $column_name, $struct): SetForeignDataStructureCommand;
	function hasOldDataStructure(string $column_name):bool;
	function hasForeignDataStructure(string $column_name):bool;
	function hasForeignDataStructures(): bool;
	function setOldDataStructure($column_name, $old_struct);
	//protected function reciprocateRelationship(string $column_name, DataStructure $struct):void;
	function subordinateForeignDataStructure(string $column_name, DataStructure $subordinate_struct, ?string $converse_key_name=null, ?int $relationship_type=null);
	function hasForeignDataStructureListMember(string $column_name, string $key): bool;
	function hasOldDataStructureListMember(string $column_name, string $key):bool;
	//protected function beforeSetForeignDataStructureHook(string $column_name, DataStructure $struct):int;
	//protected function afterSetForeignDataStructureHook(string $column_name, DataStructure $struct):int;
	function withForeignDataStructure($column_name, $struct): DataStructure;
	function setForeignDataStructure(string $column_name, DataStructure $struct):?DataStructure;
	function getForeignDataStructureListMemberAtOffset(string $column_name, int $offset): DataStructure;
	function loadForeignDataStructureFromConverse(mysqli $mysqli, string $column_name, bool $lazy=false, int $recursion_depth = 0, bool $subordinate=false):?DataStructure;
	function loadForeignDataStructure(mysqli $mysqli, string $column_name, bool $lazy = false, int $recursion_depth = 0, bool $subordinate=false): ?DataStructure;
	//protected function loadForeignDataStructureList(mysqli $mysqli, string $column_name, bool $lazy = false, int $recursion_depth = 0, bool $subordinate=false);
	function loadForeignDataStructures(mysqli $mysqli, bool $lazy = false, int $recursion_depth = 0, bool $subordinate = false): int;
	function hasForeignDataStructureList(string $column_name): bool;
	function getForeignDataStructureCount(string $column_name): int;
	function setForeignDataStructureList(string $column_name, array $list): array;
	function releaseForeignDataStructure(string $column_name, bool $deallocate=false):int;
	function releaseForeignDataStructureListMember(string $column_name, $key, bool $deallocate=false):int;
	function setForeignDataStructureListMember(string $column_name, ...$structs): int;
	function getForeignDataStructureKey(string $column_name);
	function hasOldDataStructures():bool;
	function hasOldDataStructureList(string $column_name): bool;
	function getForeignDataStructureList(string $column_name): array;
	function getForeignDataStructureListMember(string $column_name, $key): DataStructure;
	function getForeignDataStructureListMemberCommand(string $column_name, $key): GetForeignDataStructureListMemberCommand;
	//protected function fulfillMutuallyReferentialForeignKeys():int;
	function debugMutualOneToOneForeignKeys();
	//protected function generateUndefinedForeignKeys();
	//protected function beforeDeriveForeignDataStructuresHook(): int;
	function deriveForeignDataStructures(mysqli $mysqli): int;
	//protected function afterDeriveForeignDataStructuresHook(): int;
	function pushForeignDataStructureListMember(string $phylum, ...$structs): int;
	function getVirtualForeignDataStructure(string $column_name, $key_or_offset = null);
	function reloadForeignDataStructures(mysqli $mysqli, bool $foreign = true): int;
	//protected function beforeUpdateForeignDataStructuresHook(mysqli $mysqli, string $when): int;
	//protected function updateForeignDataStructures(mysqli $mysqli, string $when): int;
	//protected function afterUpdateForeignDataStructuresHook(mysqli $mysqli, string $when): int;
	function getPreUpdateForeignDataStructuresFlag():bool;
	function setPreUpdateForeignDataStructuresFlag(bool $value=true):bool;
	function getPostUpdateForeignDataStructuresFlag():bool;
	function setPostUpdateForeignDataStructuresFlag(bool $value=true):bool;
	//protected function postUpdateForeignDataStructures(mysqli $mysqli): int;
	//protected function updateForeignColumns(mysqli $mysqli): int;
	//protected function preUpdateForeignDataStructures(mysqli $mysqli): int;
	function copyForeignDataStructures($that):int;
	function getForeignDataStructureListCommand(string $phylum): GetForeignDataStructureListCommand;
	function getAssociationDistance(string $column_name, $value): int;
	static function migrateMonomorphicToPoly(mysqli $mysqli, ...$column_names): int;
	function getForeignDataStructureCountCommand(string $column_name): GetForeignDataStructureCountCommand;
	function unshiftForeignDataStructureListMember(string $column_name, DataStructure $struct);
	function getFirstRelationship(string $tree_name): ?DataStructure;
	function getDescendants(string $phylum): array;
	//protected function reportAmbiguousRelationship(string $column_name):?string;
	function releaseForeignDataStructureList(string $column_name, bool $recursive=false);
	function releaseAllForeignDataStructures(bool $recursive=false):void;
	function canReleaseForeignDataStructure(string $column_name):bool;
	function canReleaseForeignDataStructureListMember(string $column_name, $key):bool;
	function getPostInsertForeignDataStructuresFlag();
	function setPostInsertForeignDataStructuresFlag(bool $value = true): bool;
	function setDeleteForeignDataStructuresFlag(bool $value=true):bool;
	function getDeleteForeignDataStructuresFlag():bool;
	//protected function beforeDeleteForeignDataStructuresHook(mysqli $mysqli): int;
	function deleteForeignDataStructures(mysqli $mysqli): int;
	//protected function afterDeleteForeignDataStructuresHook(mysqli $mysqli): int;
	//protected function beforeInsertForeignDataStructuresHook(mysqli $mysqli, string $when): int;
	//protected function insertForeignDataStructures(mysqli $mysqli, string $when): int;
	//protected function afterInsertForeignDataStructuresHook(mysqli $mysqli, string $when): int;
	function setPreInsertForeignDataStructuresFlag(bool $value = true): bool;
	function getPreInsertForeignDataStructuresFlag(): bool;
	function debugPrintForeignDataStructures();
	function setDeleteOldDataStructuresFlag(bool $value = true): bool;
	function getDeleteOldDataStructuresFlag(): bool;
	function setAutoloadFlags(bool $value = true, ?array $column_names = null): bool;
	function beforeExpandHook(mysqli $mysqli): int;
	function afterExpandHook(mysqli $mysqli): int;
	function setExpandedFlag(bool $value = true): bool;
	function getExpandedFlag(): bool;
}
